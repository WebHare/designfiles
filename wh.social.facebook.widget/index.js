/* generated from Designfiles Public by generate_data_designfles */
require ('../frameworks.mootools');
require ('../wh.social.socialite.widget');
require ('../frameworks.mootools.more.request.jsonp');
/*! REQUIRE: frameworks.mootools, wh.social.socialite.widget, frameworks.mootools.more.request.jsonp !*/

/*

Support for creating Facebook widgets

*/

if(!window.$wh) $wh={};

(function($) { //mootools wrapper

/*
Note: Facebook first searches for posts with the specified limit,
      and afterwards filters away anything you may not see which can
      result in getting less messages than you expected.
      Also we might want to filter out status updates generated by Facebook.
      To prevent this we try to get more messages, but may not succeed.


ADDME: ability to update the posts again, replacing the old DOM
ADDME: ability to use a server provided 'current' timestamp to know the 'correct time' for a website's timezone
ADDME: parse entities/urls (url's and id/persons/etc on facebook)
ADDME: show images for all friends in 'added friends'-status/link post? requires calls to retrieve images for those persons
ADDME: ability (and option to enable/disable) support for inline youtube video's in a post
*/

$wh.FacebookWidget = new Class(
{ Extends: $wh.SocialWidget
, options: { userid:           "" // numeric id or username
           , url:              ""
           , accesstoken:      ""
           , hidefacebookstories: true
           }
, myid:    0
, request: null

, initialize: function(el, options)
  {
    this.parent(options);

    if(!this.options.userid && !this.options.url)
    {
      console.error("No userid or url provided to indentify from which source to get Facebook posts.");
      return;
    }

    if(!this.options.userid)
      this.options.userid = this.getUseridFromUrl(this.options.url);

    this.container = $(el);
    this.container.addClass('-wh-facebook-widget');
    this.container.addClass('wh-facebook-widget'); // FIXME: why add this class??
    el.store("wh-facebook-widget",this);

    this.update_posts();
  }

, getUseridFromUrl:function(url)
  {
    url=url.split('#')[0].split('&')[0];
    var protocol=url.split('//')[0];
    var hostname=url.split('/')[2];
    var urlpath=url.split('/').slice(3).join('/');

    if(hostname!='facebook.com' && hostname!='www.facebook.com')
      return '';
    if(urlpath.substr(0,15)=="profile.php?id=")
      return urlpath.substr(15);
    if(urlpath.substr(0,6)=="pages/")
      return urlpath.split('/')[1];
    return urlpath.split('/')[0];
  }

, update_posts: function()
  {
    if(!this.options.userid)
      return console.warn("Cannot update facebook stream, no userid");

    this.request = new Request.JSONP({ url:         "https://graph.facebook.com/"+this.options.userid+"/posts"
                                     , callbackKey: "callback"
                                     , data: { limit:        50
                                             , access_token: this.options.accesstoken
                                           //, nocache:      Math.round(Math.random()*99999999) // FIXME: caching seems to aggressively happen at Facebook's side, so this doesn't fix a delay in posts appearing
                                             }
                                     , onSuccess:   this.updatePostsDOM.bind(this)
                                     }).send();
  }

, updatePostsDOM: function(result)
  {
    if (!result.data)
    {
      var msg=result.error?result.error.message:'';
      return console.warn("Facebook request failed: " + msg, result);
    }
    var messages = result.data;

    var messages_shown = 0;
    for(var msgnr = 0; msgnr < messages.length && messages_shown < this.options.maxitems; msgnr++)
    {
      var msg = messages[msgnr];

      /*
      try to hide activity-posts generated by Facebook
      (Facebook doesn't provide information on how to recognize these posts,
      but these criteria come very close)
      These messages include:
          - ... is now friends with ...
          - "..." on ....'s timeline
      */
      if (this.options.hidefacebookstories
          && !msg.message
          && !msg.name
          && (msg.type == "status" || msg.type == "link")
         )
      {
        if (this.options.debug)
          console.log("Skipping message "+msgnr);
        continue;
      }

      var feeditem = { from: msg.from.name
                     , fromavatar: this.options.showprofileimage ? "https://graph.facebook.com/"+msg.from.id+"/picture?type=square" : "" //ADDME allow caller to specify avatar type
                     , text: msg.message ? msg.message : msg.story
                     , embed: null

                     , network: 'facebook'
                     , url: this.options.url
                     , postdate: Date.parse(msg.created_time)
                     }

      if(['link','photo','video'].contains(msg.type))
      {
        // .name and .description don't seem to return the same content as the
        // actual posts on the wall show (they return the fields as they initially
        // were before the user editted them ??)
        feeditem.embed= { link: msg.link };

        if (msg.picture)
          feeditem.embed.image = msg.picture;
        if (msg.name)
          feeditem.embed.title = msg.name;
        // should be returned according to FB documentation, but doesn't seem to be
        if (msg.description)
          feeditem.embed.description = msg.description;
      }

      messages_shown++;
      var quote = this.createFeedItem(this.prepareFeedItem(feeditem));
      if (quote) // we use the hardcoded dom created by js (if a template was used we don't get the node back)
        this.container.appendChild(quote);
    }
    if (this.options.debug && window.console)
    {
      console.log("Got "+messages.length+" messages, specified maxitems "+this.options.maxitems+", shown: "+messages_shown);
    }

    $wh.fireLayoutChangeEvent(this.container, "up");
  }
});

$wh.setupElementAsFacebookWidget = function(el)
{
  el=$(el);
  if(el.retrieve("wh-facebook-widget"))
    return el.retrieve("wh-facebook-widget");

  var opts = { showprofileimage:    ['true','1'].contains(el.getAttribute("data-showprofileimage"))
             , showpostdate:        ['true','1'].contains(el.getAttribute("data-showpostdate"))
             , hidefacebookstories: ['true','1'].contains(el.getAttribute("data-hidefacebookstories"))
             , userid: el.getAttribute("data-userid")
             , url: el.getAttribute("data-url")
             , accesstoken: el.getAttribute("data-accesstoken")
             , linktarget: el.getAttribute("data-linktarget")
             };
  if(el.getAttribute('data-maxitems'))
    opts.maxitems = parseInt(el.getAttribute('data-maxitems'));

  return new $wh.FacebookWidget(el, opts);
};

$(window).addEvent("domready", function()
{
  $$('.-wh-facebook-widget, .wh-facebook-widget').each($wh.setupElementAsFacebookWidget);
});

})(document.id); //end mootools wrapper
